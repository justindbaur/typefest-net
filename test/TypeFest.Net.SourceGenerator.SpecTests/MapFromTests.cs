namespace TypeFest.Net.SourceGenerator.SpecTests;

public class MapFromTests : TestBase
{
    [Fact]
    public async Task Works()
    {
        await RunAndCompareAsync("""
            using TypeFest.Net;

            namespace TestNamespace;

            [MapFrom<OtherPerson>()]
            public partial class Person
            {
                public string Name { get; set; }
            }
            
            public class OtherPerson
            {
                public string Name { get; set; }
            }
            """,
            """
            // <auto-generated/>
            namespace TestNamespace
            {
                partial class Person
                {
                    public static global::TestNamespace.Person FromOtherPerson(global::TestNamespace.OtherPerson value)
                    {
                        return new global::TestNamespace.Person
                        {
                            Name = value.Name,
                        };
                    }
                }
            }
            """
        );
    }

    [Fact]
    public async Task Ignore()
    {
        await RunAndCompareAsync("""
            using TypeFest.Net;

            namespace Test;

            [MapFrom<Person>(Ignore = ["Name"])]
            public partial class OtherPerson
            {
                public Guid Id { get; set; }
                public string? Name { get; set; }
            }

            public class Person
            {
                public Guid Id { get; set; }
                public string Name { get; set; }
            }
            """,
            """
            // <auto-generated/>
            namespace Test
            {
                partial class OtherPerson
                {
                    public static global::Test.OtherPerson FromPerson(global::Test.Person value)
                    {
                        return new global::Test.OtherPerson
                        {
                            Id = value.Id,
                        };
                    }
                }
            }
            """
        );
    }
}