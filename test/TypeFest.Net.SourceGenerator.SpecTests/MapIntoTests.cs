namespace TypeFest.Net.SourceGenerator.SpecTests;

public class MapIntoTests : TestBase
{
    [Fact]
    public async Task Class_Works()
    {
        await RunAndCompareAsync("""
            using TypeFest.Net;

            namespace TestNamespace;

            [MapInto<OtherPerson>()]
            public partial class Person
            {
                public string Name { get; set; }
            }
            
            public class OtherPerson
            {
                public string Name { get; set; }
            }
            """,
            """
            // <auto-generated/>
            namespace TestNamespace
            {
                partial class Person
                {
                    public global::TestNamespace.OtherPerson IntoOtherPerson()
                    {
                        return new global::TestNamespace.OtherPerson
                        {
                            Name = Name,
                        };
                    }
                }
            }
            """
        );
    }

    [Fact]
    public async Task RecordStruct_Works()
    {
        await RunAndCompareAsync("""
            using TypeFest.Net;

            namespace Test;
            
            [MapInto<OtherPerson>()]
            public partial record struct Person
            {
                public int Age { get; init; }
            }

            public record struct OtherPerson
            {
                public int Age { get; init; }
            }
            """,
            """
            // <auto-generated/>
            namespace Test
            {
                partial record struct Person
                {
                    public global::Test.OtherPerson IntoOtherPerson()
                    {
                        return new global::Test.OtherPerson
                        {
                            Age = Age,
                        };
                    }
                }
            }
            """
        );
    }
}