namespace TypeFest.Net.SourceGenerator.SpecTests;

public class OmitTests : TestBase
{
    [Fact]
    public async Task SingleArg()
    {
        await RunAndCompareAsync("""
            using TypeFest.Net;

            namespace TestNamespace;

            [Omit<Person>("Name")]
            public partial class EditPerson;

            public class Person
            {
                public Guid Id { get; set; }
                public string Name { get; set; }
            }
            """,
            """
            // <auto-generated/>
            namespace TestNamespace
            {
                partial class EditPerson
                {
                    /// <inheritdoc cref="global::TestNamespace.Person.Id" />
                    public Guid Id { get; set; }

                    public static EditPerson From(global::TestNamespace.Person value)
                    {
                        return new EditPerson
                        {
                            Id = value.Id,
                        };
                    }
                }
            }
            """
        );
    }

    [Fact]
    public async Task MultiArg()
    {
        await RunAndCompareAsync("""
            using TypeFest.Net;

            namespace TestNamespace;

            [Omit<Person>("Name", "Age", "Occupation")]
            public partial class EditPerson;

            public class Person
            {
                public Guid Id { get; set; }
                public string Name { get; set; }
                public int Age { get; set; }
                public string Occupation { get; set; }
            }
            """,
            """
            // <auto-generated/>
            namespace TestNamespace
            {
                partial class EditPerson
                {
                    /// <inheritdoc cref="global::TestNamespace.Person.Id" />
                    public Guid Id { get; set; }

                    public static EditPerson From(global::TestNamespace.Person value)
                    {
                        return new EditPerson
                        {
                            Id = value.Id,
                        };
                    }
                }
            }
            """);
    }

    [Fact]
    public async Task ParamsAsArray()
    {
        await RunAndCompareAsync("""
            using TypeFest.Net;

            namespace TestNamespace;

            [Omit<Person>("Name", ["Age", "Occupation"])]
            public partial class EditPerson;

            public class Person
            {
                public Guid Id { get; set; }
                public string Name { get; set; }
                public int Age { get; set; }
                public string Occupation { get; set; }
            }
            """,
            """
            // <auto-generated/>
            namespace TestNamespace
            {
                partial class EditPerson
                {
                    /// <inheritdoc cref="global::TestNamespace.Person.Id" />
                    public Guid Id { get; set; }

                    public static EditPerson From(global::TestNamespace.Person value)
                    {
                        return new EditPerson
                        {
                            Id = value.Id,
                        };
                    }
                }
            }
            """);
    }
}